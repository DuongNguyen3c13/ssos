<?php
//
// Copyright (C) 2018 Authlete, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific
// language governing permissions and limitations under the
// License.
//


/**
 * File containing the definition of AuthorizationRequestBaseHandler class.
 */


namespace Authlete\Laravel\Handler;


use Authlete\Dto\AuthorizationFailAction;
use Authlete\Dto\AuthorizationFailReason;
use Authlete\Dto\AuthorizationFailRequest;
use Authlete\Dto\AuthorizationIssueAction;
use Authlete\Dto\AuthorizationIssueRequest;
use Authlete\Dto\Property;
use Authlete\Laravel\Web\ResponseUtility;
use Illuminate\Http\Response;


/**
 * The base class for request handlers that are used in the implementation
 * of an authorization endpoint.
 */
class AuthorizationRequestBaseHandler extends BaseRequestHandler
{
    /**
     * Call Authlete's /api/auth/authorization/issue API and generate a
     * Response instance according to the value of the "action" parameter
     * in the response from the API.
     *
     * Read the description of `AuthorizationIssueRequest` for details about
     * the parameters given to this method.
     *
     * @param string $ticket
     *     The ticket which was issued from Authlete's
     *     `/api/auth/authorization` API.
     *
     * @param string $subject
     *     The subject (= unique identifier) of the end-user.
     *
     * @param integer|string $authTime
     *     The time at which the end-user was authenticated. The value should
     *     be seconds since the Unix epoch (1970-Jan-1).
     *
     * @param string $acr
     *     The Authentication Context Class Reference performed for the
     *     end-user authentication.
     *
     * @param array $claims
     *     The claims about the end-user.
     *
     * @param Property[] $properties
     *     Arbitrary properties to be associated with an access token and/or
     *     an authorization code.
     *
     * @param string[] $scopes
     *     Scopes to be associated with an access token and/or an authorization
     *     code.
     *
     * @param string $sub
     *     The value of the `sub` claim which is embedded in an ID token.
     *     If this argument is `null`, the value of `$subject` will be used
     *     instead.
     *
     * @return Response
     *     An HTTP response that should be returned from the authorization
     *     endpoint implementation to the user agent.
     */
    protected function authorizationIssue(
        $ticket, $subject, $authTime, $acr, array $claims = null,
        array $properties = null, array $scopes = null, $sub)
    {
        // Call Authlete's /api/auth/authorization/issue API.
        $response = $this->callAuthorizationIssueApi(
            $ticket, $subject, $authTime, $acr, $claims,
            $properties, $scopes, $sub);

        // 'action' in the response denotes the next action which the
        // implementation of the endpoint should take.
        $action = $response->getAction();

        // The content of the response to the client application.
        // The format of the content varies depending on the action.
        $content = $response->getResponseContent();

        // Dispatch according to the action.
        switch ($action)
        {
            case AuthorizationIssueAction::$INTERNAL_SERVER_ERROR:
                // 500 Internal Server Error
                return ResponseUtility::internalServerError($content);

            case AuthorizationIssueAction::$BAD_REQUEST:
                // 400 Bad Request
                return ResponseUtility::badRequest($content);

            case AuthorizationIssueAction::$LOCATION:
                // 302 Found
                return ResponseUtility::location($content);

            case AuthorizationIssueAction::$FORM:
                // 200 OK
                return ResponseUtility::okHtml($content);

            default:
                // 500 Internal Server Error
                // This should never happen.
                return $this->unknownAction('/api/auth/authorization/issue');
        }
    }


    private function callAuthorizationIssueApi(
        $ticket, $subject, $authTime, $acr, array $claims = null,
        array $properties = null, array $scopes = null, $sub)
    {
        $claimsInJson = is_null($claims) ? null : json_encode($claims);

        // Prepare a request for Authlete's /api/auth/authorization/issue API.
        $request = (new AuthorizationIssueRequest())
            ->setTicket($ticket)
            ->setSubject($subject)
            ->setAuthTime($authTime)
            ->setAcr($acr)
            ->setClaims($claimsInJson)
            ->setProperties($properties)
            ->setScopes($scopes)
            ->setSub($sub)
            ;

        // Call Authlete's /api/auth/authorization/issue API.
        return $this->getApi()->authorizationIssue($request);
    }


    /**
     * Call Authlete's /api/auth/authorization/fail API and generate a
     * Response instance according to the value of the "action" parameter
     * in the response from the API.
     *
     * Read the description of `AuthorizationFailRequest` for details about
     * the parameters given to this method.
     *
     * @param string $ticket
     *     The ticket which was issued from Authlete's
     *     `/api/auth/authorization` API.
     *
     * @param AuthorizationFailReason $reason
     *     The reason of the failure of the authorization request.
     *
     * @return Response
     *     An HTTP response that should be returned from the authorization
     *     endpoint implementation to the user agent.
     */
    protected function authorizationFail($ticket, AuthorizationFailReason $reason)
    {
        // Call Authlete's /api/auth/authorization/fail API.
        $response = $this->callAuthorizationFailApi($ticket, $reason);

        // 'action' in the response denotes the next action which the
        // implementation of the endpoint should take.
        $action = $response->getAction();

        // The content of the response to the client application.
        // The format of the content varies depending on the action.
        $content = $response->getResponseContent();

        // Dispatch according to the action.
        switch ($action)
        {
            case AuthorizationFailAction::$INTERNAL_SERVER_ERROR:
                // 500 Internal Server Error
                return ResponseUtility::internalServerError($content);

            case AuthorizationFailAction::$BAD_REQUEST:
                // 400 Bad Request
                return ResponseUtility::badRequest($content);

            case AuthorizationFailAction::$LOCATION:
                // 302 Found
                return ResponseUtility::location($content);

            case AuthorizationIssueAction::$FORM:
                // 200 OK
                return ResponseUtility::okHtml($content);

            default:
                // 500 Internal Server Error
                // This should never happen.
                return $this->unknownAction('/api/auth/authorization/fail');
        }
    }


    private function callAuthorizationFailApi($ticket, AuthorizationFailReason $reason)
    {
        // Prepare a request for Authlete's /api/auth/authorization/fail API.
        $request = (new AuthorizationFailRequest())
            ->setTicket($ticket)
            ->setReason($reason)
            ;

        // Call Authlete's /api/auth/authorization/fail API.
        return $this->getApi()->authorizationFail($request);
    }
}
?>

