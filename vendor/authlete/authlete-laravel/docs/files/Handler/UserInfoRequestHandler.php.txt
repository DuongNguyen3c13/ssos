<?php
//
// Copyright (C) 2018 Authlete, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific
// language governing permissions and limitations under the
// License.
//


/**
 * File containing the definition of UserInfoRequestHandler class.
 */


namespace Authlete\Laravel\Handler;


use Authlete\Api\AuthleteApi;
use Authlete\Api\AuthleteApiException;
use Authlete\Dto\UserInfoAction;
use Authlete\Dto\UserInfoIssueAction;
use Authlete\Dto\UserInfoIssueRequest;
use Authlete\Dto\UserInfoRequest;
use Authlete\Dto\UserInfoResponse;
use Authlete\Laravel\Handler\Spi\UserInfoRequestHandlerSpi;
use Authlete\Laravel\Web\ResponseUtility;
use Authlete\Laravel\Web\WebUtility;
use Illuminate\Http\Request;
use Illuminate\Http\Response;


/**
 * Handler for requests to a userinfo endpoint.
 */
class UserInfoRequestHandler extends BaseRequestHandler
{
    /**
     * The value of the WWW-Authenticate header of the response from the
     * userinfo endpoint when the userinfo request does not contain an
     * access token.
     */
    private static $CHALLENGE =
        'Bearer error="invalid_token",' .
        'error_description="An access token must be sent as a Bearer Token. ' .
        'See OpenID Connect Core 1.0, 5.3.1. UserInfo Request for details."';


    private $spi = null;  // \Authlete\Laravel\Handler\Spi\UserInfoRequestHandlerSpi


    /**
     * Constructor.
     *
     * @param AuthleteApi $api
     *     An implementation of the `AuthleteApi` interface.
     *
     * @param UserInfoRequestHandlerSpi $spi
     *     An implementation of the `UserInfoRequestHandlerSpi` interface.
     */
    public function __construct(AuthleteApi $api, UserInfoRequestHandlerSpi $spi)
    {
        parent::__construct($api);

        $this->spi = $spi;
    }


    /**
     * Handle a userinfo request.
     *
     * This method calls Authlete's `/api/auth/userinfo` API and conditionally
     * `/api/auth/userinfo/issue` API.
     *
     * @param Request request
     *     A userinfo request.
     *
     * @return Response
     *     An HTTP response that should be returned from the userinfo endpoint
     *     implementation to the client application.
     *
     * @throws AuthleteApiException
     */
    public function handle(Request $request)
    {
        // Extract the access token from the request.
        $accessToken = WebUtility::extractAccessToken($request);

        if (is_null($accessToken))
        {
            // 400 Bad Request with a WWW-Authenticate header.
            return ResponseUtility::wwwAuthenticate(
                Response::HTTP_BAD_REQUEST, self::$CHALLENGE);
        }

        // Call Authlete's /api/auth/userinfo API.
        $response = $this->callUserInfoApi($accessToken);

        // 'action' in the response denotes the next action which the
        // implementation of userinfo endpoint should take.
        $action = $response->getAction();

        // The content of the response to the client application.
        $content = $response->getResponseContent();

        // Dispatch according to the action.
        switch ($action)
        {
            case UserInfoAction::$INTERNAL_SERVER_ERROR:
                // 500 Internal Server Error
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_INTERNAL_SERVER_ERROR, $content);

            case UserInfoAction::$BAD_REQUEST:
                // 400 Bad Request
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_BAD_REQUEST, $content);

            case UserInfoAction::$UNAUTHORIZED:
                // 401 Unauthorized
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_UNAUTHORIZED, $content);

            case UserInfoAction::$FORBIDDEN:
                // 403 Forbidden
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_FORBIDDEN, $content);

            case UserInfoAction::$OK:
                // Return the user information.
                return $this->getUserInfo($response);

            default:
                // 500 Internal Server Error.
                // This should never happen.
                return $this->unknownAction('/api/auth/userinfo');
        }
    }


    private function callUserInfoApi($accessToken)
    {
        // Create a request for Authlete's /api/auth/userinfo API.
        $request = (new UserInfoRequest())->setToken($accessToken);

        // Call Authlete's /api/auth/userinfo API.
        return $this->getApi()->userInfo($request);
    }


    private function getUserInfo(UserInfoResponse $response)
    {
        // Collect claim values of the user.
        $collector = $this->createClaimCollector($response);
        $claims    = $collector->collect();

        // The value of the "sub" claim (optional).
        $sub = $this->spi->getSub();

        // Generate a response from the userinfo endpoint.
        return $this->userInfoIssue($response->getToken(), $claims, $sub);
    }


    private function createClaimCollector(UserInfoResponse $response)
    {
        return new ClaimCollector(
            $response->getSubject(),
            $response->getClaims(),
            null,
            $this->spi
        );
    }


    private function userInfoIssue($token, $claims, $sub)
    {
        // Call Authlete's /api/auth/userinfo/issue API.
        $response = $this->callUserInfoIssueApi($token, $claims, $sub);

        // 'action' in the response denotes the next action which the
        // implementation of userinfo endpoint should take.
        $action = $response->getAction();

        // The content of the response to the client application.
        // The format of the content varies depending on the action.
        $content = $response->getResponseContent();

        // Dispatch according to the action.
        switch ($action)
        {
            case UserInfoIssueAction::$INTERNAL_SERVER_ERROR:
                // 500 Internal Server Error
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_INTERNAL_SERVER_ERROR, $content);

            case UserInfoIssueAction::$BAD_REQUEST:
                // 400 Bad Request
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_BAD_REQUEST, $content);

            case UserInfoIssueAction::$UNAUTHORIZED:
                // 401 Unauthorized
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_UNAUTHORIZED, $content);

            case UserInfoIssueAction::$FORBIDDEN:
                // 403 Forbidden
                return ResponseUtility::wwwAuthenticate(
                    Response::HTTP_FORBIDDEN, $content);

            case UserInfoIssueAction::$JSON:
                // 200 OK, application/json; charset=UTF-8
                return ResponseUtility::okJson($content);

            case UserInfoIssueAction::$JWT:
                // 200 OK, application/jwt
                return ResponseUtility::okJwt($content);

            default:
                // 500 Internal Server Error.
                // This should never happen.
                return $this->unknownAction('/api/auth/userinfo/issue');
        }
    }


    private function callUserInfoIssueApi($token, $claims, $sub)
    {
        $claimsInJson = is_null($claims) ? null : json_encode($claims);

        // Prepare a request for Authlete's /api/auth/userinfo/issue API.
        $request = (new UserInfoIssueRequest())
            ->setToken($token)
            ->setClaims($claimsInJson)
            ->setSub($sub)
            ;

        // Call Authlete's /api/auth/userinfo/issue API.
        return $this->getApi()->userInfoIssue($request);
    }
}
?>

